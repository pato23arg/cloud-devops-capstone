version: 2.1

parameters:
  circleci_image:
    type: string
    default: python:3.7.3-stretch
  py_alp_image:
    type: string
    default: python:3.7-alpine3.11
  cluster-name:
    type: string
    default: k8s-${CIRCLE_WORKFLOW_ID}

orbs:
  slack: circleci/slack@3.4.2  # for slack integration to https://udapeople.slack.com; reference: https://circleci.com/blog/continuous-integration-slack-twilio/
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
  
jobs:
  build-and-lint:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            pip3 install pylint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate 
            make lint
    
  build-and-push-docker-image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            docker build -t pato23arg/api-endpoint:${CIRCLE_WORKFLOW_ID} .
            docker login -u ${DOCKER_LOGIN} -p ${DOCKER_PASSWORD}
            docker push pato23arg/api-endpoint:${CIRCLE_WORKFLOW_ID}

  test-k8s:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster
      - slack/status
      
  create-deployment-blue:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "kubernetes/deployment-blue.yml"
          resource-name: deployment/webserver-blue
      - kubernetes/create-or-update-resource:
          resource-file-path: "kubernetes/service-blue.yml"

  create-deployment-green:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "kubernetes/deployment-green.yml"
          resource-name: deployment/webserver-green          
      - kubernetes/create-or-update-resource:
          resource-file-path: "kubernetes/service-green.yml"

  migrate-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
          install-kubectl: true      
      - kubernetes/create-or-update-resource:
          resource-file-path: "kubernetes/service-migrate.yml"
          resource-name: loadbalancer-blue
              
workflows:
  deployment:
    jobs:
      - build-and-lint
      - build-and-push-docker-image:
          requires: [build-and-lint]
      - aws-eks/create-cluster:
          requires: [build-and-lint]
          aws-region: ${AWS_DEFAULT_REGION}
          cluster-name: k8s-${CIRCLE_WORKFLOW_ID}
      - test-k8s:
          cluster-name: << pipeline.parameters.cluster-name >>
          requires: [aws-eks/create-cluster]
      - create-deployment-blue:
          cluster-name: << pipeline.parameters.cluster-name >>
          requires: [test-k8s]
      - create-deployment-green:
          cluster-name: << pipeline.parameters.cluster-name >>
          requires: [test-k8s]
      - migrate-deployment:
          cluster-name: k8s-${WORKFLOW_ID}
          requires: [create-deployment-blue, create-deployment-green]         
      - aws-eks/delete-cluster:
          cluster-name: k8s-${WORKFLOW_ID}
          requires: [migrate-deployment]
