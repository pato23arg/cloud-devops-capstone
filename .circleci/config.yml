version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      wkfl_id:
        type: string
      when:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: << parameters.when >>
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.wkfl_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.wkfl_id >>
            aws s3 rm s3://udapeople-<< parameters.wkfl_id >> --recursive
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      wkfl_id:
        type: string
      when:
        type: string   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: << parameters.when >>
          working_directory: ./backend
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_<< parameters.wkfl_id >>)
            echo $SUCCESS
            if(( $SUCCESS=="MIGRATION_FAILED" )); 
            then
            #  cd ~/project/backend
               npm install
            #  Add revert code here. You can find this in the Getting Started section.
               npm run migrations:revert
            fi
parameters:
  circleci_image:
    type: string
    default: python:3.7.3-stretch
  py_alp_image:
    type: string
    default: python:3.7-alpine3.11

orbs:
  slack: circleci/slack@3.4.2  # for slack integration to https://udapeople.slack.com; reference: https://circleci.com/blog/continuous-integration-slack-twilio/

jobs:
  build:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            pip3 install pylint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate 
            make lint 

  deploy-k8s:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install Dependencies for Persistence
          command: |
            yum -y install tar gzip
      - run:
          name: Deploy Network for K8s
          command: |
            aws cloudformation deploy \
              --template-file clouformation/kube-network.yml \
              --tags project=udacity-capstone-${CIRCLE_WORKFLOW_ID}-net \
              --stack-name udacity-capstone-${CIRCLE_WORKFLOW_ID}-net \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --parameters clouformation/kube-network-parameters.json

      - run:
          name: Deploy K8s Cluster
          command: |
            aws cloudformation deploy \
              --template-file clouformation/kube-cluster.yml \
              --tags project=udacity-capstone-${CIRCLE_WORKFLOW_ID}-k8s \
              --stack-name udacity-capstone-${CIRCLE_WORKFLOW_ID}-k8s \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --parameters clouformation/kube-cluster-parameters.json

      - run:
          name: Fetch k8s Master details
          command: |
            MASTER_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity-capstone-${CIRCLE_WORKFLOW_ID}-net" \
              --output text)
            echo $MASTER_IP
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "https://$MASTER_IP" https://api.memstash.io/values/MASTER_URL
            
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - slack/status
  configure-infrastructure:
    docker:
      - image: << pipeline.parameters.py_alp_image >>
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["5a:13:2a:3a:3f:15:df:9e:d2:2a:d4:ea:84:46:ea:02"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            # Your code here
            apk add --update ansible
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  run-migrations:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            # Your code here
            npm install
            npm run migrations > backend_migration_status
            cat backend_migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            # Your code here
            if grep -q "has been executed successfully" backend_migration_status
            then
              echo "Migration OK, updating memstash..."
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "MIGRATION_OK" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "Migration failed, verify configuration!"
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "MIGRATION_FAILED" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
            echo "wkfl_id=${CIRCLE_WORKFLOW_ID}"
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  deploy-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get update && sudo apt-get install -yy less tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo $API_URL
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            # your code here
            export API_URL=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo $API_URL
            npm install 
            npm install oauth2
            npm install webpack
            npm run build
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  deploy-backend:
    docker:
      - image: << pipeline.parameters.py_alp_image >>
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["5a:13:2a:3a:3f:15:df:9e:d2:2a:d4:ea:84:46:ea:02"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd /tmp
            apk add --update ansible curl rsync openssh nodejs npm tar gzip
            pip install awscli
      - restore_cache:
          keys: ["backend-dist", "backend-build"]
      - run:
          name: Compress dist Files
          command: |
            cd /home
            tar czf backend.tar.gz -P /home/circleci/project/backend
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            # your code here
            ls -al && pwd
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vv
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail 

  smoke-test:
    docker:
      - image: << pipeline.parameters.py_alp_image >> 
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          working_directory: ./backend
          command: |
            # your code here
            BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo ${BACKEND_URL}
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            # your code here
            BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo ${BACKEND_URL}
            curl -s "${BACKEND_URL}/api/status"
      - run:
          name: Frontend smoke test.
          working_directory: ./frontend
          command: |
            S3_URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.us-east-1.amazonaws.com/index.html"
            if curl -s ${S3_URL} | grep -q "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y nodejs curl
      - run:
          name: Store old WorkflowID
          command: |
            OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID
            echo $OldWorkflowID > OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution with new S3 bucket
          command: |
            # your code here
            OldWorkflowID=$(cat OldWorkflowID.txt)
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople-cloudfront-${CIRCLE_WORKFLOW_ID} \
              --stack-name udapeople-cloudfront-${OldWorkflowID} \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"
              
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          wkfl_id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail   

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/OldWorkflowID)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo $OldWorkflowID > OldWorkflowID.txt
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(cat OldWorkflowID.txt)
            aws cloudformation list-stacks --stack-status "CREATE_COMPLETE" > current_stacks
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              if grep -q "udapeople-backend-${OldWorkflowID}" current_stacks
              then
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              fi
              if grep -q "udapeople-frontend-${OldWorkflowID}" current_stacks
              then
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
